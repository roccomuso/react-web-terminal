{"version":3,"sources":["Terminal.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Terminal","props","state","commands","history","prompt","this","setState","showWelcomeMsg","showHelp","openLink","listFiles","clearHistory","addHistory","link","window","open","term","registerCommands","focus","scrollBar","scrollToBottom","e","key","input_text","value","input_array","split","input","arg","command","undefined","call","clearInput","output","Array","isArray","concat","push","map","op","i","style","width","autoHeight","autoHeightMin","autoHeightMax","ref","elem","autoHide","autoHideTimeout","autoHideDuration","id","className","onClick","handleClick","bind","type","onKeyPress","handleInput","Component","App","height","cx","cy","r","fill","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8370f191.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Scrollbars} from 'react-custom-scrollbars'\nimport './App.css'\n\nclass Terminal extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      commands: {},\n      history: [],\n      prompt: '$ '\n    }\n  }\n\n  clearHistory() {\n    this.setState({history: []});\n  }\n\n  registerCommands() {\n    this.setState({\n      commands: {\n        'intro': this.showWelcomeMsg,\n        'help': this.showHelp,\n        'github': this.openLink('https://github.com/roccomuso'),\n        'source': this.openLink('https://github.com/roccomuso/react-web-terminal'),\n        'ls': this.listFiles,\n        'clear': this.clearHistory\n      }\n    });\n  }\n\n  listFiles() {\n    this.addHistory(\"README.md\");\n  }\n\n  showWelcomeMsg() {\n    this.addHistory(\"Hello, this web-terminal lets you take control of a remote device.\");\n    this.addHistory(\"Type `help` to see what all commands are available\");\n  }\n\n  openLink(link) {\n    return function() {\n      window.open(link, '_blank');\n    }\n  }\n\n  showHelp() {\n    this.addHistory([\n      \"intro - print intro message\",\n      \"help - this help text\",\n      \"github - view my github profile\",\n      \"source - browse the code for this page\",\n      \"ls - list files\",\n      \"clear - clear screen\"\n    ])\n  }\n\n  componentDidMount() {\n    var term = this.term\n\n    this.registerCommands();\n    this.showWelcomeMsg();\n    term.focus();\n  }\n\n  componentDidUpdate() {\n    this.scrollBar.scrollToBottom()\n  }\n\n  handleInput(e) {\n    if (e.key === \"Enter\") {\n      var input_text = this.term.value;\n      var input_array = input_text.split(' ');\n      var input = input_array[0];\n      var arg = input_array[1];\n      var command = this.state.commands[input];\n\n      this.addHistory(this.state.prompt + \" \" + input_text);\n\n      if (command === undefined) {\n        this.addHistory(\"sh: command not found: \" + input);\n      } else {\n        command.call(this, arg);\n      }\n      this.clearInput();\n    }\n  }\n\n  clearInput() {\n    this.term.value = \"\";\n  }\n\n  addHistory(output) {/* output: Array or String */\n    var history = this.state.history;\n    if (Array.isArray(output)) {\n      history = history.concat(output)\n    } else {\n      history.push(output)\n    }\n\n    this.setState({'history': history})\n  }\n\n  handleClick() {\n    var term = this.term\n    term.focus()\n  }\n\n  render() {\n    var output = this.state.history.map(function(op, i) {\n      return <p key={i}>{op}</p>\n    })\n\n    return (\n      <Scrollbars style={{ width: 715 }} autoHeight autoHeightMin={100} autoHeightMax={400} ref={elem => this.scrollBar = elem} autoHide autoHideTimeout={1000} autoHideDuration={200}>\n        <div id=\"content\">\n          <div className='input-area' onClick={this.handleClick.bind(this)}>\n            {output}\n            <p>\n              <span className=\"prompt\">{this.state.prompt}</span>\n              <input type=\"text\" onKeyPress={this.handleInput.bind(this)} ref={elem => this.term = elem}/>\n            </p>\n          </div>\n        </div>\n      </Scrollbars>\n    )\n  }\n\n}\n\nexport default Terminal\n","import React, {Component} from 'react'\nimport Terminal from './Terminal.jsx'\nimport './App.css'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <div id=\"bar\" className='container'>\n          <svg height=\"30\" width=\"100\">\n            <circle cx=\"24\" cy=\"19\" r=\"6\" fill=\"#bf616a\"/>\n            <circle cx=\"44\" cy=\"19\" r=\"6\" fill=\"#ebcb8b\"/>\n            <circle cx=\"64\" cy=\"19\" r=\"6\" fill=\"#a3be8c\"/>\n          </svg>\n        </div>\n        <div className=\"container\" id=\"main\">\n          <div className=\"holder\">\n            <Terminal/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}